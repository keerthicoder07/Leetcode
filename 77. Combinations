class Solution {
    void backtrack(int start, int n, int k, List<Integer> path, List<List<Integer>> result) {
    if (path.size() == k) {
        result.add(new ArrayList<>(path));
        return;
    }
    for (int i = start; i <= n; i++) {
        path.add(i);           // Make a choice
        backtrack(i + 1, n, k, path, result); // Explore
        path.remove(path.size() - 1); // Backtrack
    }
}

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> list=new ArrayList<>();
        List<Integer> path=new ArrayList<>();
      backtrack(1,n,k,path,list);
        return list;
    }
}
